#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

// Graph class representing an undirected graph using adjacency list representation
class Graph {
    int V; // Number of vertices

    // Pointer to an array containing adjacency lists
    vector<int> *adj;


public:
    Graph(int V); // Constructor
    void addEdge(int v, int w); // Function to add an edge to the graph
    void BFS(int s); // Breadth-first search from a given source vertex
    void DFS(int s); // Depth-first search from a given source vertex
};

Graph::Graph(int V) {
    this->V = V;
    adj = new vector<int>[V];
}

void Graph::addEdge(int v, int w) {
    adj[v].push_back(w); // Add w to vâ€™s list
}

void Graph::BFS(int s) {
    // Mark all the vertices as not visited
    vector<bool> visited(V, false);

    // Create a queue for BFS
    queue<int> queue;

    // Mark the current node as visited and enqueue it
    visited[s] = true;
    queue.push(s);

    while (!queue.empty()) {
        // Dequeue a vertex from queue and print it
        s = queue.front();
        cout << s << " ";
        queue.pop();

        // Get all adjacent vertices of the dequeued vertex s. If an adjacent has not been visited, then mark it visited and enqueue it.
        #pragma omp parallel for
        for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {
            if (!visited[*i]) {
                visited[*i] = true;
                queue.push(*i);
            }
        }
    }
}

void Graph::DFS(int s) {
    // Mark all the vertices as not visited
    vector<bool> visited(V, false);

    // Create a stack for DFS
    stack<int> stack;

    // Mark the current node as visited and push it
    visited[s] = true;
    stack.push(s);

    while (!stack.empty()) {
        // Pop a vertex from stack and print it
        s = stack.top();
        cout << s << " ";
        stack.pop();

        // Get all adjacent vertices of the popped vertex s. If an adjacent has not been visited, then mark it visited and push it.
        #pragma omp parallel for
        for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {
            if (!visited[*i]) {
                visited[*i] = true;
                stack.push(*i);
            }
        }
    }
}

int main() {
    // Create a graph given in the example
    Graph g(12);
    g.addEdge(5, 4);
    g.addEdge(5, 9);
    g.addEdge(4, 2);
    g.addEdge(4, 7);
    g.addEdge(2, 1);
    g.addEdge(9, 7);
    g.addEdge(9, 11);
    g.addEdge(7, 8);

    cout << "BFS starting from vertex 0: ";
    g.BFS(5);
    cout << endl;

    cout << "DFS starting from vertex 0: ";
    g.DFS(5);
    cout << endl;

    return 0;
}
